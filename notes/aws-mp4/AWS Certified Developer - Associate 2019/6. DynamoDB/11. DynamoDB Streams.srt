1
00:00:00,120 --> 00:00:06,770
Helicopters and welcome to this lecture and this lecture is all about dynamo D-B streams and we've got

2
00:00:06,770 --> 00:00:11,700
some student feedback recently that Dynamo IDB streams are coming up in the exam.

3
00:00:11,760 --> 00:00:16,770
So this lecture is just to tell you everything that you need to know about tiny IDB streams.

4
00:00:16,770 --> 00:00:18,350
So let's get started.

5
00:00:18,360 --> 00:00:20,510
So what dynamo deep streams.

6
00:00:20,610 --> 00:00:28,320
Well a dynamo D-B stream is a time ordered sequence or stream and it records any modifications made

7
00:00:28,350 --> 00:00:30,990
to the items in your doited my D-B table.

8
00:00:31,260 --> 00:00:38,400
So any time there's an insert update or delete operation it's going to record that in your dynamo D-B

9
00:00:38,400 --> 00:00:39,600
stream.

10
00:00:39,600 --> 00:00:46,170
So it records all of these actions as I log and the logs are encrypted at rest and they're stored for

11
00:00:46,170 --> 00:00:48,480
24 hours only.

12
00:00:48,570 --> 00:00:52,940
So that means after 24 hours it's going to start deleting those entries.

13
00:00:53,220 --> 00:00:55,270
And typically don't to IDB streams.

14
00:00:55,260 --> 00:00:59,490
They can be used for auditing or archiving of transactions.

15
00:00:59,520 --> 00:01:06,540
Replaying any transactions to a different table but they're mainly used to trigger events based on a

16
00:01:06,540 --> 00:01:10,050
particular change within the domain of AB table.

17
00:01:10,080 --> 00:01:13,500
So they're really really good for service architectures.

18
00:01:13,560 --> 00:01:19,650
You can use a dynamo ODP stream to trigger a lambda function for example or to trigger your application

19
00:01:19,710 --> 00:01:25,560
to do something based on a change in the time to my db table and the streams are accessed using their

20
00:01:25,620 --> 00:01:27,880
own dedicated endpoint.

21
00:01:27,900 --> 00:01:34,110
So there's one end point to access that don't you IDB table itself and then there's a second separate

22
00:01:34,350 --> 00:01:36,930
and point for the IDB Stream.

23
00:01:37,110 --> 00:01:44,190
And by default the minimum amount of data you can record is the primary key of the item that is being

24
00:01:44,310 --> 00:01:46,420
modified updated or deleted.

25
00:01:46,500 --> 00:01:50,610
But you can also store before and after images.

26
00:01:50,610 --> 00:01:56,970
So you can capture the state of the item before the change and the State of the item after the change

27
00:01:57,090 --> 00:01:57,950
as well.

28
00:01:58,230 --> 00:02:05,130
So let's take a look at a simple architecture for Dynamite D-B streams Samekh application at the top

29
00:02:05,460 --> 00:02:10,560
and it uses the time to my GP API to speak to its dynamo IDB typos.

30
00:02:10,590 --> 00:02:14,010
So it's got one end point for the time of IDB table.

31
00:02:14,550 --> 00:02:21,180
And then there's a completely different type of Modibo streams API and a different end point for its

32
00:02:21,180 --> 00:02:23,400
Doyne MIDP stream as well.

33
00:02:23,400 --> 00:02:30,210
And just remember the event data is only held for 24 hours before they start deleting it.

34
00:02:30,210 --> 00:02:33,140
Now the effects are recorded in near real time.

35
00:02:33,240 --> 00:02:39,630
So once again that makes it really really good for service architectures and to build applications which

36
00:02:39,630 --> 00:02:46,020
respond to changes in your data my D-B table applications can take actions based on the contents of

37
00:02:46,020 --> 00:02:46,720
your streams.

38
00:02:46,830 --> 00:02:52,890
Based on what's going on within your dynamite db table it makes a really good event source for lambda

39
00:02:52,990 --> 00:02:59,940
so Alamdar will pull that item IDB stream and then can execute code launch functions based on events

40
00:02:59,940 --> 00:03:02,490
happening within your daughter IDB stream.

41
00:03:02,490 --> 00:03:09,190
So let's take a look at an example scenario using dynamite Eby streams to trigger a work flow.

42
00:03:09,240 --> 00:03:16,320
And in this example we have an invoicing and payments system which is recording invoice data into a

43
00:03:16,320 --> 00:03:17,710
diner IDB table.

44
00:03:17,790 --> 00:03:24,150
And each time a new invoice entry is made into the dining IDB table there's a Lunda function which reads

45
00:03:24,150 --> 00:03:27,590
the Dine IDB strain to check Finney's transactions.

46
00:03:27,630 --> 00:03:34,710
And then when it sees a new event sends a notification using SS which in turn creates a message in an

47
00:03:34,770 --> 00:03:40,800
ask us queue and you can then have your payments application polling that ask us queue processing the

48
00:03:40,800 --> 00:03:46,710
message and it performs various tasks like generating a payment request adding an item to a customer's

49
00:03:46,710 --> 00:03:54,000
bill etc. so you can say this is a really powerful way to generate triggers to lammed to trigger your

50
00:03:54,000 --> 00:03:59,850
application to take actions based on the changing contents of your dynamo D-B table.

51
00:03:59,850 --> 00:04:03,600
So let's take a look at the exam tips for dining IDB stream's.

52
00:04:03,630 --> 00:04:11,180
Well just remember it's a time ordered sequence of some level modifications in your design and IDB tables.

53
00:04:11,220 --> 00:04:17,610
So every time an item gets changed and you try to Modibo table it's going to record that in the IDB

54
00:04:17,610 --> 00:04:20,310
stream the data is only stored for 24 hours.

55
00:04:20,340 --> 00:04:22,910
And after that it's going to start getting deleted.

56
00:04:23,070 --> 00:04:29,040
And it's a really good event source for lambda allowing you to create applications which can take actions

57
00:04:29,190 --> 00:04:32,610
based on events happening within your time in my D-B table.

58
00:04:32,610 --> 00:04:34,100
So that's the end of this lecture.

59
00:04:34,170 --> 00:04:36,640
If you have any questions please let me know.

60
00:04:36,690 --> 00:04:39,000
If not feel free to move on to the next lecture.

61
00:04:39,070 --> 00:04:39,320
Thank.
