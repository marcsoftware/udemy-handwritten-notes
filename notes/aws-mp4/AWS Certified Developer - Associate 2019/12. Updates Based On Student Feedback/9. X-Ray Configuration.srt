1
00:00:00,530 --> 00:00:01,420
Hello.

2
00:00:01,440 --> 00:00:08,940
And welcome to this lecture and this lecture is just gonna be a quick recap on x ray as well as a high

3
00:00:08,940 --> 00:00:16,380
level overview of general configuration steps that you need to take to get it all working so hopefully

4
00:00:16,380 --> 00:00:18,540
they should all be quite familiar to you.

5
00:00:18,630 --> 00:00:25,950
If you remember that x ray gives you an end to end view of your distributed applications including service

6
00:00:25,980 --> 00:00:32,280
or micro services based applications allowing you to check for performance bottlenecks as well as failures

7
00:00:32,280 --> 00:00:33,820
in your system.

8
00:00:33,900 --> 00:00:39,180
But the really great thing about x ray is that you can actually use it to monitor applications which

9
00:00:39,180 --> 00:00:45,390
are running on easy to inelastic container service and also applications running in your own data center

10
00:00:46,140 --> 00:00:52,100
as well as server list technologies like lambda dynamo D.B. and API gateway.

11
00:00:52,650 --> 00:00:59,730
So in this diagram we've got an easy to instance and a plastic container service cluster running docker

12
00:00:59,730 --> 00:01:07,410
containers and we've also got an on premises system in our own data center and they are all sending

13
00:01:07,410 --> 00:01:16,200
data into x ray and the way that it all hangs together is that you have this a w w x ray SDK installed

14
00:01:16,260 --> 00:01:23,460
on your system and the H.W. s x ray SDK sends the data to the x ray daemon which is also running on

15
00:01:23,460 --> 00:01:29,910
your system and the x ray daemon actually buffers the segments in a queue and then it uploads them into

16
00:01:29,940 --> 00:01:35,700
x ray in batches and the main point of this diagram is just really to show you that you need both the

17
00:01:35,700 --> 00:01:43,980
x ray SDK and the x ray daemon on your systems in order to start sending data into x ray.

18
00:01:44,010 --> 00:01:50,010
Now in terms of the high level configuration steps just remember that you need the x ray SDK and the

19
00:01:50,010 --> 00:01:57,660
x ray daemon as well and you use the SDK to instrument your application to send the required data for

20
00:01:57,660 --> 00:02:04,710
example data about incoming and outgoing HDTV requests that are being made to your Java application.

21
00:02:04,710 --> 00:02:10,320
And when we say instrument is just the terminology that they use to describe configuring your application

22
00:02:10,320 --> 00:02:17,060
to start sending data or traces into x ray and the high level configuration steps are as follows.

23
00:02:17,070 --> 00:02:23,340
So first of all for on premises and easy to systems you're going to need to install the x ray daemon

24
00:02:23,370 --> 00:02:29,970
directly on your easy to instance or on your on premises server if you're running Elastic Beanstalk

25
00:02:30,060 --> 00:02:36,090
you can just install the x ray daemon once again on the easy two instances inside your Elastic Beanstalk

26
00:02:36,150 --> 00:02:43,050
environments and if you're using docker containers an elastic container service then you'll need to

27
00:02:43,050 --> 00:02:50,310
install the x ray daemon on its own docker container on your ECM cluster along side your application

28
00:02:50,580 --> 00:02:56,040
so don't install the x ray daemon on the same docker container where your application is running it's

29
00:02:56,040 --> 00:03:03,820
going to need to be in its own docker container so let's move on to annotations and indexing.

30
00:03:04,020 --> 00:03:06,140
So what are annotations.

31
00:03:06,150 --> 00:03:12,630
Well when instruments in your application you can actually record additional information about requests

32
00:03:12,750 --> 00:03:21,150
or traces by using annotations and annotations are simply key value pairs and they actually get indexed

33
00:03:21,150 --> 00:03:27,960
by x ray and you can use them with filter expressions so that you can go ahead and search for traces

34
00:03:27,960 --> 00:03:30,000
which contain specific data.

35
00:03:30,060 --> 00:03:36,450
And it allows you to group related traces together in the console for example you might want to add

36
00:03:36,450 --> 00:03:44,640
an annotation of game name or game I.D. so that you can then filter on traces which contain that annotation.

37
00:03:44,730 --> 00:03:48,750
So that is all you really need to know about x ray configuration.

38
00:03:48,750 --> 00:03:55,830
And just remember that x ray it integrates with many AWB services like dynamo D.B. lambda API Gateway

39
00:03:55,830 --> 00:04:02,880
etc. and you can also instrument your own applications to send data into x ray applications could be

40
00:04:02,880 --> 00:04:09,300
running on easy to within Elastic Beanstalk environments on your on premises systems in your own data

41
00:04:09,300 --> 00:04:14,190
center and also within Docker on a plastic container service.

42
00:04:14,280 --> 00:04:19,600
And just remember if you are running your application on a plastic container service then run the x

43
00:04:19,600 --> 00:04:25,800
ray daemon in its own Docker image and just have that running alongside your application and to get

44
00:04:25,800 --> 00:04:26,810
started with x ray.

45
00:04:26,850 --> 00:04:34,380
The three things that you will need are firstly the x ray SDK you'll also need the x ray daemon and

46
00:04:34,380 --> 00:04:40,170
you also need to go ahead and instrument your application using the SDK to configure it to send the

47
00:04:40,170 --> 00:04:42,190
required data into x ray.

48
00:04:42,240 --> 00:04:47,210
So for example any data about incoming ATP requests to your application.

49
00:04:47,250 --> 00:04:54,390
And finally if you also want to record application specific information in the form of key value pairs

50
00:04:54,660 --> 00:05:00,750
then use annotations and you can use annotations to add user defined key value pairs to your x ray data

51
00:05:01,110 --> 00:05:07,200
allowing you to filter index and search within x ray based on a key value pairs that you define.

52
00:05:07,200 --> 00:05:10,200
So think something like game name or game I.D..

53
00:05:10,440 --> 00:05:12,170
So that is the end of this lecture.

54
00:05:12,420 --> 00:05:14,740
If you have any questions let me know.

55
00:05:14,880 --> 00:05:17,460
If not feel free to move on to the next lecture.

56
00:05:17,460 --> 00:05:18,000
Thank you.
